from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv
import os
import google.generativeai as genai
import emoji

app = Flask(__name__)

# Load environment variables
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.5-flash')

# List of common flag emojis
flag_emojis = [
    "ğŸ‡¦ğŸ‡«", "ğŸ‡¦ğŸ‡±", "ğŸ‡©ğŸ‡¿", "ğŸ‡¦ğŸ‡¸", "ğŸ‡¦ğŸ‡©", "ğŸ‡¦ğŸ‡´", "ğŸ‡¦ğŸ‡®", "ğŸ‡¦ğŸ‡¶", "ğŸ‡¦ğŸ‡¬", "ğŸ‡¦ğŸ‡·",
    "ğŸ‡¦ğŸ‡²", "ğŸ‡¦ğŸ‡¼", "ğŸ‡¦ğŸ‡º", "ğŸ‡¦ğŸ‡¹", "ğŸ‡¦ğŸ‡¿", "ğŸ‡§ğŸ‡¸", "ğŸ‡§ğŸ‡­", "ğŸ‡§ğŸ‡©", "ğŸ‡§ğŸ‡§", "ğŸ‡§ğŸ‡¾",
    "ğŸ‡§ğŸ‡ª", "ğŸ‡§ğŸ‡¿", "ğŸ‡§ğŸ‡¯", "ğŸ‡§ğŸ‡²", "ğŸ‡§ğŸ‡¹", "ğŸ‡§ğŸ‡´", "ğŸ‡§ğŸ‡¶", "ğŸ‡§ğŸ‡¦", "ğŸ‡§ğŸ‡¼", "ğŸ‡§ğŸ‡·",
    "ğŸ‡®ğŸ‡´", "ğŸ‡»ğŸ‡¬", "ğŸ‡§ğŸ‡³", "ğŸ‡§ğŸ‡¬", "ğŸ‡§ğŸ‡«", "ğŸ‡§ğŸ‡®", "ğŸ‡°ğŸ‡­", "ğŸ‡¨ğŸ‡´", "ğŸ‡¨ğŸ‡¦", "ğŸ‡¨ğŸ‡»",
    "ğŸ‡°ğŸ‡¾", "ğŸ‡¨ğŸ‡«", "ğŸ‡¹ğŸ‡©", "ğŸ‡¨ğŸ‡±", "ğŸ‡¨ğŸ‡³", "ğŸ‡¨ğŸ‡½", "ğŸ‡¨ğŸ‡¨", "ğŸ‡¨ğŸ‡´", "ğŸ‡°ğŸ‡²", "ğŸ‡¨ğŸ‡¬",
    "ğŸ‡¨ğŸ‡©", "ğŸ‡¨ğŸ‡°", "ğŸ‡¨ğŸ‡·", "ğŸ‡­ğŸ‡·", "ğŸ‡¨ğŸ‡º", "ğŸ‡¨ğŸ‡¼", "ğŸ‡¨ğŸ‡¾", "ğŸ‡¨ğŸ‡¿", "ğŸ‡©ğŸ‡°", "ğŸ‡©ğŸ‡¯",
    "ğŸ‡©ğŸ‡²", "ğŸ‡©ğŸ‡´", "ğŸ‡ªğŸ‡¨", "ğŸ‡ªğŸ‡¬", "ğŸ‡¸ğŸ‡»", "ğŸ‡¬ğŸ‡¶", "ğŸ‡ªğŸ‡·", "ğŸ‡ªğŸ‡ª", "ğŸ‡¸ğŸ‡¿", "ğŸ‡ªğŸ‡¹",
    "ğŸ‡«ğŸ‡°", "ğŸ‡«ğŸ‡´", "ğŸ‡«ğŸ‡¯", "ğŸ‡«ğŸ‡®", "ğŸ‡«ğŸ‡·", "ğŸ‡¬ğŸ‡«", "ğŸ‡µğŸ‡«", "ğŸ‡¹ğŸ‡«", "ğŸ‡¬ğŸ‡¦", "ğŸ‡¬ğŸ‡²",
    "ğŸ‡¬ğŸ‡ª", "ğŸ‡©ğŸ‡ª", "ğŸ‡¬ğŸ‡­", "ğŸ‡¬ğŸ‡®", "ğŸ‡¬ğŸ‡·", "ğŸ‡¬ğŸ‡±", "ğŸ‡¬ğŸ‡©", "ğŸ‡¬ğŸ‡µ", "ğŸ‡¬ğŸ‡º", "ğŸ‡¬ğŸ‡¹",
    "ğŸ‡¬ğŸ‡¬", "ğŸ‡¬ğŸ‡³", "ğŸ‡¬ğŸ‡¼", "ğŸ‡¬ğŸ‡¾", "ğŸ‡­ğŸ‡¹", "ğŸ‡­ğŸ‡³", "ğŸ‡­ğŸ‡°", "ğŸ‡­ğŸ‡º", "ğŸ‡®ğŸ‡¸", "ğŸ‡®ğŸ‡³",
    "ğŸ‡®ğŸ‡©", "ğŸ‡®ğŸ‡·", "ğŸ‡®ğŸ‡¶", "ğŸ‡®ğŸ‡ª", "ğŸ‡®ğŸ‡²", "ğŸ‡®ğŸ‡±", "ğŸ‡®ğŸ‡¹", "ğŸ‡¨ğŸ‡®", "ğŸ‡¯ğŸ‡²", "ğŸ‡¯ğŸ‡µ",
    "ğŸ‡¯ğŸ‡ª", "ğŸ‡¯ğŸ‡´", "ğŸ‡°ğŸ‡¿", "ğŸ‡°ğŸ‡ª", "ğŸ‡°ğŸ‡®", "ğŸ‡°ğŸ‡µ", "ğŸ‡°ğŸ‡·", "ğŸ‡°ğŸ‡¼", "ğŸ‡°ğŸ‡¬", "ğŸ‡±ğŸ‡¦",
    "ğŸ‡±ğŸ‡»", "ğŸ‡±ğŸ‡§", "ğŸ‡±ğŸ‡¸", "ğŸ‡±ğŸ‡·", "ğŸ‡±ğŸ‡¾", "ğŸ‡±ğŸ‡®", "ğŸ‡±ğŸ‡¹", "ğŸ‡±ğŸ‡º", "ğŸ‡²ğŸ‡´", "ğŸ‡²ğŸ‡¬",
    "ğŸ‡²ğŸ‡¼", "ğŸ‡²ğŸ‡¾", "ğŸ‡²ğŸ‡»", "ğŸ‡²ğŸ‡±", "ğŸ‡²ğŸ‡¹", "ğŸ‡²ğŸ‡­", "ğŸ‡²ğŸ‡¶", "ğŸ‡²ğŸ‡·", "ğŸ‡²ğŸ‡º", "ğŸ‡¾ğŸ‡¹",
    "ğŸ‡²ğŸ‡½", "ğŸ‡«ğŸ‡²", "ğŸ‡²ğŸ‡©", "ğŸ‡²ğŸ‡¨", "ğŸ‡²ğŸ‡³", "ğŸ‡²ğŸ‡ª", "ğŸ‡²ğŸ‡¸", "ğŸ‡²ğŸ‡¦", "ğŸ‡²ğŸ‡¿", "ğŸ‡²ğŸ‡²",
    "ğŸ‡³ğŸ‡¦", "ğŸ‡³ğŸ‡·", "ğŸ‡³ğŸ‡µ", "ğŸ‡³ğŸ‡±", "ğŸ‡³ğŸ‡¨", "ğŸ‡³ğŸ‡¿", "ğŸ‡³ğŸ‡®", "ğŸ‡³ğŸ‡ª", "ğŸ‡³ğŸ‡¬", "ğŸ‡³ğŸ‡º",
    "ğŸ‡³ğŸ‡«", "ğŸ‡²ğŸ‡µ", "ğŸ‡³ğŸ‡´", "ğŸ‡´ğŸ‡²", "ğŸ‡µğŸ‡°", "ğŸ‡µğŸ‡¼", "ğŸ‡µğŸ‡¸", "ğŸ‡µğŸ‡¦", "ğŸ‡µğŸ‡¬", "ğŸ‡µğŸ‡¾",
    "ğŸ‡µğŸ‡ª", "ğŸ‡µğŸ‡­", "ğŸ‡µğŸ‡³", "ğŸ‡µğŸ‡±", "ğŸ‡µğŸ‡¹", "ğŸ‡µğŸ‡·", "ğŸ‡¶ğŸ‡¦", "ğŸ‡·ğŸ‡ª", "ğŸ‡·ğŸ‡´", "ğŸ‡·ğŸ‡º",
    "ğŸ‡·ğŸ‡¼", "ğŸ‡§ğŸ‡±", "ğŸ‡¸ğŸ‡­", "ğŸ‡°ğŸ‡³", "ğŸ‡±ğŸ‡¨", "ğŸ‡²ğŸ‡«", "ğŸ‡µğŸ‡²", "ğŸ‡»ğŸ‡¨", "ğŸ‡¼ğŸ‡¸", "ğŸ‡¸ğŸ‡²",
    "ğŸ‡¸ğŸ‡¹", "ğŸ‡¸ğŸ‡¦", "ğŸ‡¸ğŸ‡³", "ğŸ‡·ğŸ‡¸", "ğŸ‡¸ğŸ‡¨", "ğŸ‡¸ğŸ‡±", "ğŸ‡¸ğŸ‡¬", "ğŸ‡¸ğŸ‡½", "ğŸ‡¸ğŸ‡°", "ğŸ‡¸ğŸ‡®",
    "ğŸ‡¸ğŸ‡§", "ğŸ‡¸ğŸ‡´", "ğŸ‡¿ğŸ‡¦", "ğŸ‡¸ğŸ‡¸", "ğŸ‡ªğŸ‡¸", "ğŸ‡±ğŸ‡°", "ğŸ‡¸ğŸ‡©", "ğŸ‡¸ğŸ‡·", "ğŸ‡¸ğŸ‡¯", "ğŸ‡¸ğŸ‡ª",
    "ğŸ‡¨ğŸ‡­", "ğŸ‡¸ğŸ‡¾", "ğŸ‡¹ğŸ‡¼", "ğŸ‡¹ğŸ‡¯", "ğŸ‡¹ğŸ‡¿", "ğŸ‡¹ğŸ‡­", "ğŸ‡¹ğŸ‡±", "ğŸ‡¹ğŸ‡¬", "ğŸ‡¹ğŸ‡°", "ğŸ‡¹ğŸ‡´",
    "ğŸ‡¹ğŸ‡¹", "ğŸ‡¹ğŸ‡³", "ğŸ‡¹ğŸ‡·", "ğŸ‡¹ğŸ‡²", "ğŸ‡¹ğŸ‡¨", "ğŸ‡¹ğŸ‡»", "ğŸ‡ºğŸ‡¬", "ğŸ‡ºğŸ‡¦", "ğŸ‡¦ğŸ‡ª", "ğŸ‡¬ğŸ‡§",
    "ğŸ‡ºğŸ‡¸", "ğŸ‡»ğŸ‡®", "ğŸ‡ºğŸ‡¾", "ğŸ‡ºğŸ‡¿", "ğŸ‡»ğŸ‡º", "ğŸ‡»ğŸ‡ª", "ğŸ‡»ğŸ‡³", "ğŸ‡¼ğŸ‡«", "ğŸ‡ªğŸ‡­", "ğŸ‡¾ğŸ‡ª",
    "ğŸ‡¿ğŸ‡²", "ğŸ‡¿ğŸ‡¼", "ğŸ‡½ğŸ‡°"
]

@app.route('/')
def index():
    return render_template('index.html', flags=flag_emojis)

@app.route('/detect_flag', methods=['POST'])
def detect_flag():
    try:
        selected_flag = request.json.get('flag')
        if not selected_flag:
            return jsonify({'error': 'No flag selected'}), 400

        # Create prompt for Gemini API
        prompt = f"""
        Analyze the flag emoji: {selected_flag}
        Provide the following information:
        1. Country name
        2. ISO country code
        3. Brief description of the flag (colors, symbols)
        Return the response in JSON format.
        """

        # Get response from Gemini API
        response = model.generate_content(prompt)
        
        # Assuming the response is in JSON format
        result = response.text.strip()
        if result.startswith('```json') and result.endswith('```'):
            result = result[7:-3].strip()
        
        return jsonify({
            'success': True,
            'data': result
        })

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    app.run(debug=True)